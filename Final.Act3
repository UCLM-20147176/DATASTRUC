class BTNode {
    String info;
    BTNode rlink, tlink;

    public BTNode() {
        this.info = "";
        this.rlink = null;
        this.tlink = null;
    }

    public BTNode(BTNode rlink, String info, BTNode tlink) {
        this.info = info;
        this.rlink = rlink;
        this.tlink = tlink;
    }
}


class BTClass {
    protected BTNode root;

    public BTClass() {
        this.root = null;
    }

    public BTClass(BTNode root) {
        this.root = root;
    }

    public boolean isEmpty() {
        return root == null;
    }

    public void inOrderTraversal(BTNode node) {
        if (node != null) {
            inOrderTraversal(node.tlink);
            System.out.print(node.info + " ");
            inOrderTraversal(node.rlink);
        }
    }

    public void postOrderTraversal(BTNode node) {
        if (node != null) {
            postOrderTraversal(node.tlink);
            postOrderTraversal(node.rlink);
            System.out.print(node.info + " ");
        }
    }

    public void preOrderTraversal(BTNode node) {
        if (node != null) {
            System.out.print(node.info + " ");
            preOrderTraversal(node.tlink);
            preOrderTraversal(node.rlink);
        }
    }

    public int height(BTNode node) {
        if (node == null)
            return 0;

        int leftHeight = height(node.tlink);
        int rightHeight = height(node.rlink);

        return Math.max(leftHeight, rightHeight) + 1;
    }

    private int nodeCount(BTNode node) {
        if (node == null)
            return 0;

        return 1 + nodeCount(node.tlink) + nodeCount(node.rlink);
    }

    public int getNodeCount() {
        return nodeCount(root);
    }
}

class BinarySearchTree extends BTClass {

    public BinarySearchTree() {
        super();
    }

    public BinarySearchTree(BTNode root) {
        super(root);
    }
public boolean search(String key, BTNode node) {
        if (node == null)
            return false;

        int comparisonResult = key.compareTo(node.info);

        if (comparisonResult == 0)
            return true;
        else if (comparisonResult < 0)
            return search(key, node.tlink);
        else
            return search(key, node.rlink);
    }

    public boolean search(String key) {
        return search(key, root);
    }

 public BTNode insert(String key, BTNode node) {
        if (node == null)
            return new BTNode(null, key, null);

        int comparisonResult = key.compareTo(node.info);

        if (comparisonResult < 0)
            node.tlink = insert(key, node.tlink);
        else if (comparisonResult > 0)
            node.rlink = insert(key, node.rlink);

        return node;
    }

    public void insert(String key) {
        root = insert(key, root);
    }

  private BTNode delete(String key, BTNode node, Result result) {
        if (node == null) {
            result.message = "The name was not found";
            return null;
        }

        int comparisonResult = key.compareTo(node.info);

        if (comparisonResult < 0)
            node.tlink = delete(key, node.tlink, result);
        else if (comparisonResult > 0)
            node.rlink = delete(key, node.rlink, result);
        else {
            result.message = "The name was deleted";

            if (node.tlink == null)
                return node.rlink;
            else if (node.rlink == null)
                return node.tlink;

            node.info = minValue(node.rlink);
            node.rlink = delete(node.info, node.rlink, result);
        }

        return node;
    }
    private String minValue(BTNode node) {
        String minValue = node.info;
        while (node.tlink != null) {
            minValue = node.tlink.info;
            node = node.tlink;
        }
        return minValue;
    }

   public void delete(String key) {
        Result result = new Result();
        root = delete(key, root, result);
        System.out.println("Result: " + result.message);
    }
    public int leavesCount(BTNode node) {
        if (node == null)
            return 0;
        if (node.tlink == null && node.rlink == null)
            return 1;

        return leavesCount(node.tlink) + leavesCount(node.rlink);
    }

    public int leavesCount() {
        return leavesCount(root);
    }
    class Result {
    String message;

    public Result() {
        this.message = "";
    }
}
}

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();
        Scanner scanner = new Scanner(System.in);

        int choice;

        do {
            System.out.println("\n________________________");
            System.out.println("**SELECTION MENU**");
            System.out.println("1. ADD NEW NAME");
            System.out.println("2. SEARCH NAME");
            System.out.println("3. DELETE NAME");
            System.out.println("4. COUNT NAMES");
            System.out.println("5. DISPLAY NAMES IN ALPHABETICAL ORDER");
            System.out.println("0. EXIT");
            System.out.print("Enter your choice: ");

            choice = scanner.nextInt();
            scanner.nextLine();
            switch (choice) {
                case 1:
                    System.out.print("Enter name to add: ");
                    String newName = scanner.nextLine();
                    bst.insert(newName);
                    break;

                case 2:
                    System.out.print("Enter name to search: ");
                    String searchName = scanner.nextLine();
                    System.out.println("Search result: " + (bst.search(searchName) ? "Found" : "Not Found"));
                    break;

                case 3:
                    System.out.print("Enter name to delete: ");
                    String deleteName = scanner.nextLine();
                    bst.delete(deleteName);
                    break;

                case 4:
                    System.out.println("Number of names: " + bst.getNodeCount());
                    break;

                case 5:
                    System.out.println("Names in Alphabetical Order:");
                    bst.inOrderTraversal(bst.root);
                    System.out.println("\n");
                    break;

                case 0:
                    System.out.println("Exiting program.");
                    break;

                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }

        } while (choice != 0);

        scanner.close();
    }
  
}
